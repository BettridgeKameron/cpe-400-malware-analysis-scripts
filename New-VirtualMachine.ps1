<#
    .SYNOPSIS
    Automates the creation of a VirtualBox Virtual Machine.

    .DESCRIPTION
    A PowerShell script to create a new VirtualBox Virtual Machine using a JSON formatted configuration file.

    .PARAMETER ConfigFilePath
    Path to the JSON configuration file containing the virtual machine specifications.

    .PARAMETER Check
    If provided, the script will only display the specifications without creating the VM.

    .EXAMPLE
    .\New-VirtualMachine.ps1 -ConfigFilePath "./RouterConfig.json"

    .EXAMPLE
    .\New-VirtualMachine.ps1 -ConfigFilePath "C:\path\to\RouterConfig.json" -Check

    .NOTES
    Author: Kameron Bettridge
    References: 
    - https://wenijinew.medium.com/virtualbox-automate-virtual-machine-creation-process-through-vboxmanage-powershell-5a78f3b1e000
#>

# Requires -Version 5.1

# Set strict mode
Set-StrictMode -Version Latest

# ------------------
# Constants & Defaults
# ------------------

# Non-configuration constants
$Timestamp = (Get-Date -Format "MM-dd-yyyy_HH-mm-ss")

# VirtualBox Manage binary path
$VBoxManage = "C:\Program Files\Oracle\VirtualBox\VBoxManage.exe"
$GroupID = "Generic_VMs"
$VMName = "Generic_VM_$Timestamp"
# Default configuration parameters
$DefaultConfig = @{
    GroupID = "$GroupID"
    VMName = "$VMName"
    CPUs = 2
    Memory = 2048 # 2GB in MB
    VRAM = 128
    NetworkMode = "nat"
    DiskSize = 20 * 1024 # 20GB in MB
    DiskPathFromVMHome = "$GroupID\$VMName\$VMName.vdi"
    SCPortCount = 2
    DiskSCName = "$VMName.disck_sc"
    DiskSBType = "sata"
    DiskSCType = "IntelAhci"
    DiskSCAttachPort = 0
    DiskSCAttachDevice = 0
    DiskDriveType = "hdd"
    DVDSCName = "VMName.dvd_sc"
    DVDSBType = "ide"
    DVDSCType = "PIIX4"
    DVDSCAttachPort = 1
    DVDSCAttachDevice = 0
    DVDDriveType = "dvddrive"
}

# ------------------
# Helper Functions
# ------------------

function Get-ValidOSTypes {
    & $VBoxManage list ostypes | Select-String -Pattern '^ID:\s+(\w+)' | ForEach-Object {
        $_.Matches.Groups[1].Value
    }
}
$AllOSTypes = Get-ValidOSTypes

function Get-FreeDiskSpaceMB {
    (Get-PSDrive -Name "C").Free / 1MB
}


# ------------------
# Main Function Definition
# ------------------

function New-VirtualMachine {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true, Position = 0)]
        [ValidateScript({
            if (-Not (Test-Path -Path $_ -PathType Leaf)) {
                throw "Invalid file path or file does not exist."
            }
            $Content = Get-Content -Raw -Path $_
            try {
                $null = $Content | ConvertFrom-Json
            } catch {
                throw "Invalid JSON content."
            }
            return $true
        })]
        [string]$ConfigFilePath,

        [Parameter(Mandatory = $false)]
        [switch]$Check
    )

    begin {
        $Config = Get-Content -Raw -Path $ConfigFilePath | ConvertFrom-Json
        # Merge default config with user config
        $MergedConfig = $DefaultConfig.Clone()
        $Config.PSObject.Properties | ForEach-Object { $MergedConfig[$_.Name] = $_.Value }
    }

    process {
        if ($Check) {
            "Virtual Machine would be created with the following configuration:`n"
            $MergedConfig.GetEnumerator() | ForEach-Object { "$($_.Key): $($_.Value)" }
        } else {
            # Check disk space
            if ((Get-FreeDiskSpaceMB) -lt $MergedConfig.DiskSize) {
                throw "Insufficient disk space."
            }

            "Creating Virtual Machine '$($MergedConfig.VMName)' of type '$($MergedConfig.OSType)' using ISO '$($MergedConfig.ISOPath)'"
          
            & $VBoxManage createvm --name $MergedConfig.VMName --groups "/$($MergedConfig.GroupID)" --ostype $MergedConfig.OSType --register --basefolder $MergedConfig.VMHome
            & $VBoxManage modifyvm $MergedConfig.VMName --cpus $MergedConfig.CPUs --memory $MergedConfig.Memory --vram $MergedConfig.VRAM --nic1 $MergedConfig.NetworkMode

            # Hardware disk creation
            $DiskMediumFullPath = "$($MergedConfig.VMHome)\$($MergedConfig.DiskPathFromVMHome)"
            & $VBoxManage createmedium disk --filename $DiskMediumFullPath --size $MergedConfig.DiskSize
            & $VBoxManage storagectl $MergedConfig.VMName --name $MergedConfig.DiskSCName --add $MergedConfig.DiskSBType --controller $MergedConfig.DiskSCType --portcount $MergedConfig.SCPortCount --hostiocache off --bootable on
            & $VBoxManage storageattach $MergedConfig.VMName --storagectl $MergedConfig.DiskSCName --port $MergedConfig.DiskSCAttachPort --device $MergedConfig.DiskSCAttachDevice --type $MergedConfig.DiskDriveType --medium $DiskMediumFullPath

            # DVD Creation
            & $VBoxManage storagectl $MergedConfig.VMName --name $MergedConfig.DVDSCName --add $MergedConfig.DVDSBType --controller $MergedConfig.DVDSCType --portcount $MergedConfig.SCPortCount --hostiocache off --bootable on
            & $VBoxManage storageattach $MergedConfig.VMName --storagectl $MergedConfig.DVDSCName --port $MergedConfig.DVDSCAttachPort --device $MergedConfig.DVDSCAttachDevice --type $MergedConfig.DVDDriveType --medium $MergedConfig.ISOPath

            # Boot from the DVD before the Disk after install.
            & $VBoxManage modifyvm $MergedConfig.VMName --boot1 dvd --boot2 disk --boot3 none --boot4 none

            # Start the VM
            & $VBoxManage startvm $MergedConfig.VMName
        }
    }

    end {
        if (-Not $Check) {
            Write-Output "Virtual Machine creation completed!"
        }
    }
}


# ------------------
# Main Script Execution
# ------------------

New-VirtualMachine @args